---
- name: Retrieve existing bundle-alert-timestamps ConfigMap
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig }}"
    namespace: "{{ otel_astronomy_app_namespace_project_name }}"
    kind: ConfigMap
    name: bundle-alert-timestamps
  register: existing_configmap_info
  when:
    - is_fault_injection
    - sample_application == "otel_astronomy_shop"

- name: Add fault injection time to ConfigMap
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: bundle-alert-timestamps
        namespace: "{{ otel_astronomy_app_namespace_project_name }}"
      data:
        deployment_time: "{{ existing_configmap_info.resources[0].data.deployment_time }}"
        fault_injection_time : "{{ now(utc=True, fmt='%Y-%m-%dT%H:%M:%SZ') }}"
  when:
    - is_fault_injection
    - sample_application == "otel_astronomy_shop"

- name: Retrieve existing bundle-alert-timestamps ConfigMap
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig }}"
    namespace: "{{ deathstarbench_hotelreservation_app_namespace_project_name }}"
    kind: ConfigMap
    name: bundle-alert-timestamps
  register: existing_configmap_info
  when:
    - is_fault_injection
    - sample_application == "dsb_hotel_reservation"

- name: Add fault injection time to ConfigMap
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: bundle-alert-timestamps
        namespace: "{{ deathstarbench_hotelreservation_app_namespace_project_name }}"
      data:
        deployment_time: "{{ existing_configmap_info.resources[0].data.deployment_time }}"
        fault_injection_time : "{{ now(utc=True, fmt='%Y-%m-%dT%H:%M:%SZ') }}"
  when:
    - is_fault_injection
    - sample_application == "dsb_hotel_reservation"
    - existing_configmap_info.resources | length > 0

- name: Get the assertion.json from S3
  amazon.aws.s3_object:
    endpoint_url: "https://s3.us-east-2.amazonaws.com"
    bucket: "{{ s3_bucket_name_for_results }}"
    object: "/{{ sre_agent_name__version_number }}/{{run_uuid}}/{{scenario_number}}/{{run_number}}/assertion.json"
    dest: "/tmp/assertion.json"
    mode: get
  tags:
    - book_keeping
  when:
    - sre_bench_runner
    - run_uuid is defined and scenario_number is defined and run_number is defined

- name: Read deployment details from assertion json
  set_fact:
    assertion_array: "{{ lookup('file', assertion_filepath ) | from_json | json_query('status.conditions') }}"
  when: sre_bench_runner
  tags:
    - is_fault_injection

- name: Update assertion array content
  set_fact:
    updated_assertion_array: "{{ assertion_array + [{'type': 'FaultInjected', 'status': true, 'lastTransitionTime':now(utc=True, fmt='%Y-%m-%dT%H:%M:%SZ')}] }}"
  when: sre_bench_runner
  tags:
    - is_fault_injection

- name: Create assertion json
  set_fact:
    assertion_json:
      status:
        conditions: "{{ updated_assertion_array }}"
  when: sre_bench_runner
  tags:
    - is_fault_injection

- name: Add fault injection details
  copy:
    content: "{{ assertion_json | to_json | indent(2) }}"
    dest: "{{ assertion_filepath }}"
    mode: "0644"
  when: sre_bench_runner
  tags:
    - is_fault_injection

- name: Upload the assertion JSON to S3
  amazon.aws.s3_object:
    endpoint_url: "https://s3.us-east-2.amazonaws.com"
    bucket: "{{ s3_bucket_name_for_results }}"
    object: "/{{ sre_agent_name__version_number }}/{{run_uuid}}/{{scenario_number}}/{{run_number}}/assertion.json"
    src: "/tmp/assertion.json"
    mode: put
  tags:
    - is_fault_injection
  when:
    - sre_bench_runner
    - run_uuid is defined and scenario_number is defined and run_number is defined
